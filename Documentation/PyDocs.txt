Scripting language
	- computer language that is used for scriptin.

Script is a relatively short and simple set of instructions
A script is usually NOT compiled. Generally, they are interpreted directly from source code.

If you start Python, you get an INTERACTIVE mode. The written code can not be edited,compiled or runned.
This is called read-eval-print-loop(REPL) cycle.

The '_' symbol holds the last result IN THE INTERACTIVE MODE.

Comments start with #

Variables do not need to be declared with the type of the value. 
The type is associated with the value on the right hand side, not name of the variable.

Python is dynamically typed. The perceived “type” of a variable might change as a program 
executes depending on the current value assigned to it.

Language statements are always lower-case.

Indentation is used to denote groups of statements that go together. That means that you HAVE TO put spaces after
cycles to show that some statements are grouped as repeated operation.

Python’s only requirement is that indentation within the same block has to be consistent.

If you pass more than one value to print they are separated by spaces.

To get the input use input(). This takes string that will be shown and returns written value.

Sometimes you need to specify an empty code block. The keyword PASS is used for it.
This is also called a “no-op” statement. It does nothing. 
It serves as a placeholder for statements, possibly to be added later.

In Python, there is a concept of TRUTHY and FALSY values. They will be evaluated to the True and False bool type
respectively if we use them as an expression.

Strings are written with '' or "". If we want to take all the text from multiple lines we can use ''' '''

Using [] we can take one symbol or substring [:5] - all symbols up to 5, [5:] all symbols from the 5
If we use something like [-5:] it will take 5 symbols from the end of the string.

len() - returns length
Membership test - SYMB in (or not in) STRING
Replication - rep = STRING * 5 (Text with 5 repeated STRING data)

strip() - stripping any leading/trailing white space.
lower()/upper() - case conversion.

String are IMMUTABLE(their value can not be changed). All operations and methods that manipulate string data,
always create new strings.

str() - converts value to string.

f-string is a format string that can embed the values of variables into it.
It is created with f prefix : f'Super duper value: {value}'

There is a special module 're' that to support any kind of advanced pattern matching

dir(VARIABLE) can be used to get a list of all operations with the variables of the VARIABLE'S type

List is a primary type for holding values in python. It is created using following syntax:
	names = ['T','Y','P','E']
Some methods can also return lists.

Items in the list CAN be changed. You can get its length, check membership.

Use "for SMTH in LIST" to iterate through LIST (similar to foreach)
index() returns first occur

LIST.remove() can be used to remove concrete elements from list.
del LIST[index] can be used to delete element with concrete index.
If there are more than one occurence of item, remove() will delete only the first one.

LIST.sort() can be used to sort LIST

sorted(LIST) returns sorted list( can be used to make a new list instead )

EMPTY_LIST = [] - creates empty list.

Specifically, lists don’t represent vectors/matrices as in MATLAB, Octave, R, etc. 
However, there are some packages to help you with that (e.g. numpy)

FILE INPUT/OUTPUT
f = open('text.txt','rt'/'wt') - 'rt' for read text, 'wt' for write text

FILE.read() - reads data.
FILE.write('TEXT') - write data

FILE.close()

with open(filename, 'rt') as file: - with statement is preferred approach
	...
	...
	...

Pandas --- functions for reading CSV filex 

Functions:
    def FUNC_NAME(arg1,arg2,...)
	....
    return ...

To access functions from library modules we need to use import LIB

try - catch equivalent is try - except statement
	try:
	    ...
	except EXCEPTION:
            ...

To raise an eception, use the RAISE statement
	raise RuntimeError('SOME ERROR')

If the first statement of a function is a string, it serves as documentation. 

def sumcount(n):
    '''
    Returns the sum of the first n integers
    '''
...

Try typing a command such as help(greeting) to see it displayed.

None type 
email = None
None is often used as a placeholder for optional or missing value. 
It evaluates as False in conditionals.

Tuple is a collection of values grouped together.
s = ('Penis',100,490.1)

Tuples are often used to represent simple records or structures. Typically, it is a single object
of multiple parts
Tuples contents are ordered (like an array). However, the contents can't be modified.

Tuples are more about packing related items together into a single ENTITY.
It can be UNPACKED

arg1,arg2,arg3 = TUPLE_NAME
The number of variables on the left MUST match the tuple structure.

Dictionary is mapping of keys to values. Dictionaries are useful when there are MANY different values
and those values might be modified or manipulated.

dict = {
'key1':value1,
'key2':value2,
'key3':value3
}

Sets - collection of unordered unique items
set = {'arg1','arg2','arg3','arg4'}

If we have list = {arg1,arg1,arg2} and we want to get unique items, we can convert it to set 
unique = set(list) 
With set, we can perform union,intersection and difference operations(and others)

import csv - to work with csv

we can work with formats - checkout FORMAT

d = dict(zip(columns, values)) - common way is to create key/value pairs for construction dictionaries.
If we need index for some reason in the for loop, we should use ENUMERATE with it

We can use next() with any ITERABLE( f.e. file ) to move to the next element of it.
Using it with file which was returned with open(...) may help us skit the first line from the file.

While using dictionaries, we can look up a value that might not exist and provide a default value
in case it doesn't

name = dict.get(key, default)

F.e. 
  price = prices.get('GAZPROM',0.0)

SETS are useful when you want to get all unique items from the list or do any 
membership test.

The enumerate function adds an extra counter value to iteration.

The zip function takes multiple sequences and makes an iterator that combines them.

columns = ['col1','col2']
values = [1,2]
pairs = zip(columns,values) -- returns list of tuples

After that, we can create a dictionary from these pairs like this:
dic = dict(pairs) -- creates dictionary from list of tuples

Now, using items = dic.items() we can get list of tuples of the (key, value) pairs
We can INVERT this list using:

inv = list(zip(dic.values(),dic.keys()))
Now, we can perform commands such as min(), max() and sorted() on this list which
works because comparisons on tuples are performed starting from the first item(!!!)

COLLECTIONS(!!!)
If you need to use some dictionary which has structure key-number
(f.e. NAME-AVG_GRADE) you can use Counter from collections module. It is a dictionary with key-number structure.

From Counter we can get n most common values like this : counter.most_common(n)
defaultdict(list)

If we construct defaultdict with list as a default factory(???) we will get a dictionary-like structure
that has following structure:
[ (key1, [data1,data2]), (key2, [data3,data4,data5]) ]
Each time we encounter new key, the list is being attached to it.

A list comprehension creates a new list by applying an operation to each element of a sequence.

EXAMPLE:
x = [1,2,3,4,5]
x2 = [el*el for el in x]
The general syntax is: [ <expression> for <variable_name> in <sequence> ].

We can also filter like this:
b = [2*x for x in a if x > 0 ]

If we change [] tp {} we will get SET COMPREHENSION

If you specify key:value pairs, you can build a dictionary:

dik = {name:0 for name in set(names)}

In Python, assignment operations NEVER MAKE A COPY of the value being assigned(!!!)

Use the is operator to check if two values are exactly the same object.
Operator is compares the object identity (an integer). The identity can be obtained using id().

Shallow copies:
For lists and dicts we have methods for copying. F.e.
a = [1,2,[100,102],4]
b = list(a)

b IS NOT a, thus we can modify it and it will not affect a's contents. HOWEVER, the list inside the list is STILL
being shared. That means that if we modify it from b it will be modified in a too(!) That is called a SHALLOW COPY

Sometimes you need to make a copy of an object and all the objects contained within it. 
You can use the copy module for this: 

import copy
b = copy.deepcopy(a)

To get value type we have to use type()

Object has a specific type:
if isinstance(a, list):
    print('a is a list')

Numbers, strings, lists, functions, exceptions, classes, instances, etc. are all objects. 
It means that all objects that can be named can be passed around as data, placed in containers, etc., 
without any restrictions. There are no special kinds of objects. 
Sometimes it is said that all objects are “first-class”.

You can also add optional type hints to function definitions.

def function(name: string) -> dict:
  ...

The hints do nothing operationally. They are purely informational. 
However, they may be used by IDEs, code checkers, and other tools to do more.

def read_prices(filename, debug=False): #debug is an optional parameter and set false on a default
  ...

We can return multiple values by returning it in a TUPLE(!)

If you must modify a global variable you must declare it as such.

name = 'Dave'

def spam():
    global name #HERE WE USE GLOBAL(!!!)
    name = 'Guido' # Changes the global name above

Exception handling:

we use try - except syntax.
we use raise Exception to raise an exception.

Exceptions propagate to the first matching except.

finally statement
It specifies code that must run regardless of whether or not an exception occurs.

with statement
with defines a usage context for a resource. When execution leaves that context, resources are released. 
with only works with certain objects that have been specifically programmed to support it.

MODULES

A module is a collection of named values and is sometimes said to be a namespace. 
The names are all of the global variables and functions defined in the source file. 
After importing, the module name is used as a prefix. Hence the namespace.

import foo

a = foo.grok(2)
b = foo.spam('Hello')

Ways to import module/functions from module:

import math
# vs
import math as m
# vs
from math import cos, sin

(!!!)Caution: A common confusion arises if you repeat an import statement after changing the source code 
for a module. Because of the module cache sys.modules, repeated imports always return the previously 
loaded module–even if a change was made. The safest way to load modified code into Python is to quit 
and restart the interpreter.(!!!)

Even though there is no main function or method in python, it still has MAIN MODULE that executes first.

It is standard practice for modules that run as a main script to use this convention:

# prog.py
...
if __name__ == '__main__':
    # Running as the main program ...
    statements
    ...

Statements in if statement become the MAIN program

Any Python file can either run as main or as a library import(!)

Common program template for writing a Python program:

# Main function
def main():
    ...

if __name__ == '__main__':
    main()

Use the class statement to define a new object.

class Player:
  def func():
   ...

  ...

We can initialize data in class.This data is initialized by the __init__().

class Player:
    def __init__(self, x, y):
        # Any value stored on `self` is instance data
        self.x = x
        self.y = y
        self.health = 100

By convention, the instance is called self. However, the actual name used is unimportant. 
The object is always passed as the first argument. 
It is merely Python programming style to call this argument self.


Classes do not define a scope of names.

class Player:
    ...
    def move(self, dx, dy):
        self.x += dx
        self.y += dy

    def left(self, amt):
        move(-amt, 0)       # NO. Calls a global `move` function
        self.move(-amt, 0)  # YES. Calls method `move` from above.
If you want to operate on an instance, you always refer to it explicitly (e.g., self).

INHERITANCE

Inheritance is used to specialize existing objects:

class Parent:
    ...

class Child(Parent):
    ...

Sometimes a class extends an existing method, but it wants to use the original 
implementation inside the redefinition. For this, use super():

class Stock:
    ...
    def cost(self):
        return self.shares * self.price
    ...

class MyStock(Stock):
    def cost(self):
        # Check the call to `super`
        actual_cost = super().cost()
        return 1.25 * actual_cost

If __init__ is redefined, it is essential to initialize the parent.

 def __init__(self, name, shares, price, factor):
        # Check the call to `super` and `__init__`
        super().__init__(name, shares, price) #INITIALIZE THE PARENT
        self.factor = factor

__str__ and __repr__ are used to create string conversion of object and representation string conversion.

Note: The convention for __repr__() is to return a string that, when fed to eval(), 
will recreate the underlying object. If this is not possible, some kind of easily readable 
representation is used instead.

Mathematical operators involve calls to the following methods.
F.e. __sub__(b)

Special Methods for Item Access
These are the methods to implement containers.

len(x)      x.__len__()
x[a]        x.__getitem__(a)
x[a] = v    x.__setitem__(a,v)
del x[a]    x.__delitem__(a)

There is an alternative way to access, manipulate and manage attributes.

getattr(obj, 'name')          # Same as obj.name
setattr(obj, 'name', value)   # Same as obj.name = value
delattr(obj, 'name')          # Same as del obj.name
hasattr(obj, 'name')          # Tests if attribute exists

INNER WORKINGS OF PYTHON OBJECTS

Within a module, a dictionary holds all of the global variables and functions.
We can get the dictionary by 
   FILENAME.__dict__ or global()

User defined objects also use dictionaries for both instance data and classes. 
In fact, the entire object system is mostly an extra layer that’s put on top of dictionaries.

A dictionary holds the instance data, __dict__.

s = Stock('GOOG', 100, 490.1)
>>> s.__dict__
{'name' : 'GOOG', 'shares' : 100, 'price': 490.1 }

The instance data, self.__dict__, looks like this:

A separate dictionary also holds the methods:
  The dictionary is in 

>>>Stock.__dict__.
{
    'cost': <function>,
    'sell': <function>,
    '__init__': <function>
}

Instances and classes are linked together. The __class__ attribute refers back to the class.

Python precomputes an inheritance chain and stores it in the MRO attribute on the class. You can view it.
ClassName.__mro__
(Method resolution order)

Private Attributes
Any attribute name with leading _ is considered to be private.
As a general rule, any name with a leading _ is considered internal implementation 
whether it’s a variable, a function, or a module name. If you find yourself using such names 
directly, you’re probably doing something wrong. Look for higher level functionality.

If you want to set value with specifical checking of it's type, it is good to make this value PROPERTY.
Normal attribute access now triggers the getter and setter methods under @property and @shares.setter.

@property
    def shares(self):
        return self._shares

@shares.setter
    def shares(self, value):
        if not isinstance(value, int):
            raise TypeError('Expected int')
        self._shares = value


The @ syntax is known as “decoration”. It specifies a modifier that’s applied to the function 
definition that immediately follows.

__slots__ Attribute
You can restrict the set of attributes names.

class Stock:
    __slots__ = ('name','_shares','price')
    def __init__(self, name, shares, price):
        self.name = name
        ...

GENERATOR

We can redefine and customize iteration in the form of so-called "generator function"

All the objects that work with the for-loop implement following low-level "iteration protocol"

for x in obj:
  #statements

--> 

  _iter = obj.__iter__()        # Get iterator object
while True:
    try:
        x = _iter.__next__()  # Get next item
        # statements ...
    except StopIteration:     # No more items
        break

__iter__() -- returns iterator of the object. Thus, by overloading this method we can create our own container

class Portfolio:
    def __init__(self):
        self.holdings = []

    def __iter__(self):
        return self.holdings.__iter__()
    ...

The next() built-in function is a shortcut for calling the __next__() method of an iterator. 

For container objects, supporting iteration, indexing, containment, and other kinds of operators 
is an important part of making your code more "Pythonic".

A generator is a function that defines iteration.

def countdown(n):
    while n > 0:
        yield n
        n -= 1

A generator is any function that uses the yield statement.
The behavior of generators is different than a normal function. Calling a generator function creates a generator object. It does not immediately execute the function.

Now, if you write something like this:
  
  for i in countdown(10):
    print(i)

You will get all objects that were "yield" in the generator function printed